.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LIVE\-BUILD 7 2017\-08\-29 1:20170807kali1 "Live システムプロジェクト"

.SH 名前
\fBlive\-build\fP \- Live システムツール集

.SH 概要
.\" FIXME
.\" FIXME
\fBlb \fP\fIコマンド\fP [\fB\-h|\-\-help\fP] [\fB\-u|\-\-usage\fP] [\fB\-v|\-\-version\fP]
[\fB\-\-breakpoints\fP] [\fB\-\-conffile\fP] [\fB\-\-debug\fP] [\fB\-\-force\fP] [\fB\-\-quiet\fP]
[\fB\-\-verbose\fP]

.SH 説明
.\" FIXME
live\-build は Live システムのイメージをビルドするためのスクリプト集です。live\-build
の背景となる考え方は、設定ディレクトリを使って Live イメージのビルドに関するあらゆる面を完全に自動化、独自化するツール集ということです。
.PP
\fIコマンド\fPは live\-build コマンドの名前です (以下参照)。
.PP
.\" FIXME
More documentation about how to use live\-build is available in the
individual manpages for each helper and in the manual at
<\fIhttps://debian\-live.alioth.debian.org/manual/\fP>.

.SH オプション
.\" FIXME
.SS "live\-build 共有オプション"
以下のコマンドラインオプションは全 live\-build プログラムでサポートされています。
.IP "\fB\-h, \-\-help\fP" 4
ヘルプを表示して終了します。
.IP "\fB\-u, \-\-usage\fP" 4
使用方法を表示して終了します。
.IP "\fB\-v, \-\-version\fP" 4
バージョン情報を表示して終了します。
.SS "live\-build 共通オプション"
以下のコマンドラインオプションはほとんどの live\-build プログラムでサポートされています。各オプションの完全な説明については各プログラムの
man ページを見てください。
.IP \fB\-\-breakpoints\fP 4
ブレークポイントをたどります。
.IP \fB\-\-conffile\fP 4
独自の設定ファイルを使います。
.IP \fB\-\-debug\fP 4
デバッグ情報を表示します。
.IP \fB\-\-force\fP 4
段階ファイルが存在する場合でも強制的にヘルパーを実行します。
.IP \fB\-\-quiet\fP 4
出力するメッセージを少なくします。
.IP \fB\-\-verbose\fP 4
.\" FIXME
出力するメッセージを多くします。

.SH "LIVE\-BUILD コマンド"
.\" FIXME
live\-build は高レベル (「porcelain」) コマンドと低レベル (「plumbing」) コマンドに分割されています。
.PP
.\" FIXME
利用可能な全 live\-build コマンドの一覧です。詳しくはそれぞれの man ページを見てください。

.SH "高レベルコマンド (PORCELAIN)"
.\" FIXME
高レベルコマンドは主要コマンドといくらかの副次的なユーザ向けユーティリティに分けられています。
.SS 主要コマンド
.IP "\fBlb config\fP(1)" 4
creates configuration for live\-build
.IP "\fBlb bootstrap\fP(1)" 4
executes the first build stage, creating (bootstraping) a basic Debian root
filesystem
.IP "\fBlb chroot\fP(1)" 4
executes the second build stage, building the live OS filesystem
.IP "\fBlb installer\fP(1)" 4
executes the third build stage, obtaining installer components (optional)
.IP "\fBlb binary\fP(1)" 4
executes the fourth build stage, generating a binary image
.IP "\fBlb source\fP(1)" 4
executes the fifth build stage, generating a source image (optional)
.IP "\fBlb clean\fP(1)" 4
cleans up system build directories
.SS 副次的なコマンド
.IP \fBlb\fP(1) 4
generic live\-build script execution wrapper
.IP "\fBlb build\fP(1)" 4
.\" FIXME
alias for all build stages

.SH "LOW\-LEVEL COMMANDS (PLUMBING) \- BUILD STAGE COMPONENTS"
.\" FIXME
live\-build
の実際の作業は低レベルコマンドにより実装されています。低レベルコマンドはエンドユーザが直接実行することは想定していません。高レベルの主要コマンドに操作させることにより、様々な低レベルコマンドを必ず正しい順で実行するようにしています。しかし、live\-build
コマンドを自分のスクリプトで再利用したい場合はこの低レベルコマンドが対象となるかもしれません。
.PP
この低レベルコマンドへのインターフェイス (オプション群やセマンティクス)
は高レベルの主要コマンドよりもはるかに安定していることが求められることに注意してください。それに対して高レベルの主要コマンドへのインターフェイスは、エンドユーザの使い勝手改善のために変更される対象となります。
.SS "Bootstrap stage specific commands"
.IP "\fBlb bootstrap_archives\fP(1)" 4
applies apt archive configuration
.IP "\fBlb bootstrap_cache\fP(1)" 4
in save mode, saves to cache a copy of the generated bootstrap directory,
and in restore mode, restores from cache a previously generated copy
.IP "\fBlb bootstrap_debootstrap\fP(1)" 4
creates (bootstrap) a basic Debian root filesystem using debootstrap(8)
.SS "Chroot stage specific commands"
.PP
Note: The following chroot_ prefixed commands are used in building the live
OS filesystem. Another set of similarly prefixed files are listed separately
(see further down).
.IP "\fBlb chroot_cache\fP(1)" 4
in save mode, saves to cache a copy of the chroot directory, and in restore
mode, restores from cache a previously generated copy
.IP "\fBlb chroot_firmware\fP(1)" 4
compiles a list of firmware packages to be installed in the live OS root
filesystem
.IP "\fBlb chroot_hacks\fP(1)" 4
executes local hacks against the live OS root filesystem, if any are
provided
.IP "\fBlb chroot_hooks\fP(1)" 4
executes local hooks against the live OS root filesystem, if any are
provided
.IP "\fBlb chroot_includes\fP(1)" 4
copies a set of local files from the config directory into the live OS root
filesystem, if any are provided
.IP "\fBlb chroot_install\-packages\fP(1)" 4
installs into the live OS root filesystem any packages listed in local
package lists
.IP "\fBlb chroot_interactive\fP(1)" 4
pauses the build process and starts an interactive shell from the live OS
root filesystem, providing an oportunity for manual modifications or
testing; note that this is (currently) usually executed with several chroot
prep modifications applied (see description of these further down)
.IP "\fBlb chroot_linux\-image\fP(1)" 4
compiles a list of kernel images to be installed in the live OS root
filesystem
.IP "\fBlb chroot_live\-packages\fP(1)" 4
installs a set of live system specific packages to the live OS root
filesystem
.IP "\fBlb chroot_package\-lists\fP(1)" 4
compiles a list of packages provided in the user\' local config to be
installed in the live OS root filesystem
.IP "\fBlb chroot_preseed\fP(1)" 4
installs pre\-configured answers to certain install prompts into the live OS
root filesystem
.SS "Installer stage specific commands"
.IP "\fBlb installer_debian\-installer\fP(1)" 4
obtains and sets up Debian installer(d\-i) components
.IP "\fBlb installer_preseed\fP(1)" 4
installs pre\-configured answers to certain install prompts
.SS "Binary stage specific commands"
.IP "\fBlb binary_checksums\fP(1)" 4
creates checksums (md5, sha1, and/or sha256) for live image content
.IP "\fBlb binary_chroot\fP(1)" 4
duplicates the chroot directory, to place a copy of what whould be the
completed live OS root filesystem to one side, allowing the original to
continue to be used in executing certain parts of the remainder of the build
process
.IP "\fBlb binary_disk\fP(1)" 4
creates disk information files to be added to live image
.IP "\fBlb binary_grub\fP(1)" 4
installs grub into live image to provide image boot capability
.IP "\fBlb binary_grub2\fP(1)" 4
installs grub2 into live image to provide image boot capability
.IP "\fBlb binary_hdd\fP(1)" 4
compiles the final live image into an hdd image file
.IP "\fBlb binary_hooks\fP(1)" 4
executes local hooks against the live image, if any are provided
.IP "\fBlb binary_includes\fP(1)" 4
copies a set of local files from the config directory into the live image,
if any are provided
.IP "\fBlb binary_iso\fP(1)" 4
compiles the final live image into an iso file
.IP "\fBlb binary_linux\-image\fP(1)" 4
copies the linux\-image into the live image
.IP "\fBlb binary_loadlin\fP(1)" 4
bundles a copy of loadlin into the live image
.IP "\fBlb binary_manifest\fP(1)" 4
creates manifest of packages installed into live OS filesystem, and list of
packages to be excluded by a persistence mechanism installing the live OS to
disk
.IP "\fBlb binary_memtest\fP(1)" 4
bundles a copy of memtest into the live image
.IP "\fBlb binary_netboot\fP(1)" 4
compiles the final live image into a netboot tar archive
.IP "\fBlb binary_package\-lists\fP(1)" 4
processes local lists of packages to obtain and bundle into image (from
which they could later be installed if not already)
.IP "\fBlb binary_rootfs\fP(1)" 4
wraps up the completed live OS root filesystem into a virtual file system
image
.IP "\fBlb binary_syslinux\fP(1)" 4
installs syslinux into live image to provide image boot capability
.IP "\fBlb binary_tar\fP(1)" 4
compiles the final live image into a tar archive
.IP "\fBlb binary_win32\-loader\fP(1)" 4
bundles a copy of win32\-loader into the live image and creates an
autorun.inf file
.IP "\fBlb binary_zsync\fP(1)" 4
builds zsync control files
.SS "Source stage specific commands"
.IP "\fBlb source_checksums\fP(1)" 4
creates checksums (md5, sha1, and/or sha256) for source image content
.IP "\fBlb source_debian\fP(1)" 4
downloads source packages for bundling into source image
.IP "\fBlb source_disk\fP(1)" 4
creates disk information files to be added to source image
.IP "\fBlb source_hdd\fP(1)" 4
compiles the final source image into an hdd image file
.IP "\fBlb source_hooks\fP(1)" 4
executes local hooks against the source image, if any are provided
.IP "\fBlb source_iso\fP(1)" 4
compiles the final source image into an iso file
.IP "\fBlb source_live\fP(1)" 4
copies live\-build config into source
.IP "\fBlb source_tar\fP(1)" 4
.\" FIXME
compiles the final source image into a tar archive

.SH "LOW\-LEVEL COMMANDS (PLUMBING) \- CHROOT PREP COMPONENTS"
.\" FIXME
The notes above under the section regarding build\-stage specific low\-level
plumbing commands also apply here.
.PP
The following chroot_ prefixed commands are used throughout the various
primary stages of the build process to apply and remove modifications to a
chroot root filesystem. Generally these are used to apply modification that
setup the chroot for use (execution of programs within it) during the build
process, and later to remove those modification, unmounting things that were
mounted, and making the chroot suitable for use as the root filesystem of
the live OS to be bundled into the live image.
.IP "\fBlb chroot_apt\fP(1)" 4
manages apt configuration; in apply mode it applies configuration for use
during build process, and in remove mode removes that configuration
.IP "\fBlb chroot_archives\fP(1)" 4
manages apt archive source lists; in apply mode it applies source list
configurations suitable for use of the chroot in the build process, and in
remove mode replaces that with a configuration suitable for the final live
OS
.IP "\fBlb chroot_debianchroot\fP(1)" 4
manages a /etc/debian_chroot file
.IP "\fBlb chroot_devpts\fP(1)" 4
manages mounting of /dev/pts
.IP "\fBlb chroot_dpkg\fP(1)" 4
manages dpkg; in apply mode disabling things like the start\-stop\-daemon, and
in remove mode enabling them again
.IP "\fBlb chroot_hostname\fP(1)" 4
manages the hostname configuration
.IP "\fBlb chroot_hosts\fP(1)" 4
manages the /etc/hosts file
.IP "\fBlb chroot_proc\fP(1)" 4
manages mounting of /proc
.IP "\fBlb chroot_resolv\fP(1)" 4
manages configuration of the /etc/resolv.conf file
.IP "\fBlb chroot_selinuxfs\fP(1)" 4
manages mounting of /sys/fs/selinux
.IP "\fBlb chroot_sysfs\fP(1)" 4
manages mounting of /sys
.IP "\fBlb chroot_sysv\-rc\fP(1)" 4
manages the /usr/sbin/policy\-rc.d file
.IP "\fBlb chroot_tmpfs\fP(1)" 4
manages configuration of dpkg to use a tmpfs filesystem
.IP "\fBlb chroot_upstart\fP(1)" 4
.\" FIXME
manages use of upstart /sbin/initctl program; in apply mode blocking
execution through a dpkg diversion, and in remove mode enabling execution
again

.SH 設定ファイル
.\" FIXME
例えば lb_bootstrap_debootstrap は利用するオプションを読み取るのに config/bootstrap 及び
config/bootstrap_debootstrap
という名のファイルを使います。利用するファイルの名前やフォーマットの詳細については個々のコマンドの man
ページを見てください。こういったファイルには一般的に、変数とそれに指定する値を1行に1件ずつ収録します。live\-build
の一部のプログラムでは組にした値や、変数の指定にわずかに複雑な方法を採っているものがあります。
.PP
For example, lb bootstrap_debootstrap uses files named config/bootstrap and
config/bootstrap_debootstrap to read the options it will use. See the man
pages of individual commands for details about the names and formats of the
files they use. Generally, these files contain variables with values
assigned, one variable per line. Some programs in live\-build use pairs of
values or slightly more complicated variable assignments.
.PP
live\-build
は実行中のシェルに存在する環境変数を尊重することに注意してください。変数が設定ファイルから読み取れる場合にはそれが環境変数より優先され、コマンドラインオプションで指定された場合にはそれが設定ファイルの値より優先されます。ある変数が見つからない、つまり値がセットされていない場合は
live\-build が自動的にデフォルト値をセットします。
.PP
一部のまれな状況で、そういったファイルにアーキテクチャやディストリビューションにより異なるものを使いたいことがあるかもしれません。「config/段階.アーキテクチャ」または「config/段階_補助.アーキテクチャ」、それと「config/段階.ディストリビューション」または「config/段階_補助.ディストリビューション」(「アーキテクチャ」には「dpkg
\-\-print\-architecture」の出力と同じもの、「ディストリビューション」には対象ディストリビューションのコード名と同じものが入ります)
という名のファイルが存在する場合には他のそれよりも一般的な名前のファイルに優先してそのファイルが利用されます。
.PP
.\" FIXME
設定ファイルは全て、live\-build
プログラムにより作成されたシェルスクリプトです。それはつまり、通常のシェル構文に従う必要があるということです。また、設定ファイルにはコメントを残しておくこともできます。「#」で始まる行は無視されます。

.SH ファイル
.IP \fB/etc/live/build.conf\fP 4
.IP \fB/etc/live/build/*\fP 4

.SH 関連項目
\fIlive\-boot\fP(7)
.PP
\fIlive\-config\fP(7)
.PP
このプログラムは live\-build の一部です。

.SH ホームページ
More information about live\-build and the Debian Live project can be found
on the homepage at <\fIhttps://debian\-live.alioth.debian.org/\fP>.

.SH バグ
バグは <\fIhttp://bugs.debian.org/\fP> にあるバグ追跡システムに live\-build
パッケージのバグ報告として提出するか、<\fIdebian\-live@lists.debian.org\fP> にある Live
システムのメーリングリスト宛てにメールを書くことにより報告できます。

.SH 作者
live\-build は Daniel Baumann さん <\fImail@daniel\-baumann.ch\fP>
により書かれました。
